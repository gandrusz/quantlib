<Category name='catbonds'>
  <description>functions to construct and use CatBond objects.</description>
  <displayName>CatBonds</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/catbonds.hpp</include>
    <include>qlo/indexes/iborindex.hpp</include>
    <include>qlo/indexes/swapindex.hpp</include>
    <include>qlo/schedule.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/couponvectors.hpp</include>

    <include>ql/instruments/bond.hpp</include>
    <include>ql/currency.hpp</include>
    <include>ql/indexes/iborindex.hpp</include>
    <include>ql/indexes/swapindex.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/indexes/iborindex.hpp</include>
    <include>qlo/indexes/swapindex.hpp</include>
    <include>qlo/schedule.hpp</include>
    <include>qlo/catbonds.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/couponvectors.hpp</include>
    <include>ql/instruments/bond.hpp</include>

    <include>ql/termstructures/yieldtermstructure.hpp</include>
    <include>ql/pricingengines/bond/bondfunctions.hpp</include>
    <include>ql/currency.hpp</include>
    <include>ql/indexes/iborindex.hpp</include>
    <include>ql/indexes/swapindex.hpp</include>
  </addinIncludes>
  <copyright>
    Copyright (C) 2012, 2013 Grzegorz Andruszkiewicz
  </copyright>

  <Functions>
    <Constructor name='qlDigitalNotionalRisk'>
      <libraryFunction>DigitalNotionalRisk</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Threshold'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Threshold.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlProportionalNotionalRisk'>
      <libraryFunction>ProportionalNotionalRisk</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Attachement'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Attachement.</description>
          </Parameter>
          <Parameter name='Exhaustion'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Exhaustion.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>
    
    <Constructor name='qlFloatingCatBond'>
      <libraryFunction>FloatingCatBond</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='std::string()'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Bond description string. Autogenerated if null</description>
          </Parameter>
          <Parameter name='Currency'>
            <type>QuantLib::Currency</type>
            <tensorRank>scalar</tensorRank>
            <description>bond Currency.</description>
          </Parameter>
          <Parameter name='SettlementDays' exampleValue='3'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days.</description>
          </Parameter>
          <Parameter name='PaymentBDC' default='"Following"'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention.</description>
          </Parameter>
          <Parameter name='FaceAmount' default='100.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Face nominal amount.</description>
          </Parameter>
          <Parameter name='ScheduleID'>
            <type>QuantLib::Schedule</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Schedule object ID.</description>
          </Parameter>
          <Parameter name='FixingDays' default='QuantLib::Null&lt;QuantLib::Natural&gt;()'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing days (e.g. 2).</description>
          </Parameter>
          <Parameter name='IsInArrears' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the fixing is in arrears.</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='Actual/Actual (ISMA)'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment DayCounter ID.</description>
          </Parameter>
          <Parameter name='Floors' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>floor strikes.</description>
          </Parameter>
          <Parameter name='Gearings' default='1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate gearings.</description>
          </Parameter>
          <Parameter name='IborIndex'>
            <type>QuantLib::IborIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>floating rate index.</description>
          </Parameter>
          <Parameter name='Spreads' default='0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate spreads.</description>
          </Parameter>
          <Parameter name='Caps' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>cap strikes.</description>
          </Parameter>
          <Parameter name='Redemption' default='100'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Redemption value.</description>
          </Parameter>
          <Parameter name='IssueDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then.</description>
          </Parameter>
          <Parameter name='NotionalRiskID'>
            <type>QuantLib::NotionalRisk</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>NotionalRisk object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlCatBondLossProbability' type='QuantLibAddin::FloatingCatBond'>
      <description>Returns the loss probability of the CAT bond.</description>
      <libraryFunction>lossProbability</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCatBondExpectedLoss' type='QuantLibAddin::FloatingCatBond'>
      <description>Returns the expected loss of the CAT bond.</description>
      <libraryFunction>expectedLoss</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCatBondExhaustionProbability' type='QuantLibAddin::FloatingCatBond'>
      <description>Returns the exhaustion probability of the CAT bond.</description>
      <libraryFunction>exhaustionProbability</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCatBondVar' type='QuantLibAddin::FloatingCatBond'>
      <description>Returns the VaR of the CAT bond.</description>
      <libraryFunction>var</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>


    <Member name='qlCatBondStdDev' type='QuantLibAddin::FloatingCatBond'>
      <description>Returns the stdDev of the CAT bond.</description>
      <libraryFunction>stdDev</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCatBondSkew' type='QuantLibAddin::FloatingCatBond'>
      <description>Returns the skewness of the CAT bond.</description>
      <libraryFunction>skew</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCatBondKurtosis' type='QuantLibAddin::FloatingCatBond'>
      <description>Returns the kurtosis of the CAT bond.</description>
      <libraryFunction>kurtosis</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCatBondSetPricingEngine' type='QuantLibAddin::FloatingCatBond'>
      <description>Set the pricer at the given CAT Bond object.</description>
      <libraryFunction>setCatBondPricingEngine</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='MonteCarloCatBondEngineID'>
            <type>QuantLib::MonteCarloCatBondEngine</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>MonteCarloCatBondEngine object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlBetaRisk'>
      <libraryFunction>BetaRisk</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='MaxLoss'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Maximum Loss.</description>
          </Parameter>
          <Parameter name='Years'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>The CAT event happens every this number of years on average.</description>
          </Parameter>
          <Parameter name='Mean'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Average loss once the event happens.</description>
          </Parameter>
          <Parameter name='StdDev'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Standard deviation of the loss once the event happens.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlMonteCarloCatBondEngine'>
      <libraryFunction>MonteCarloCatBondEngine</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='CatRiskID'>
            <type>QuantLib::CatRisk</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>CatRisk object ID.</description>
          </Parameter>
          <Parameter name='YieldTermStructureID'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='VarLevel' default='QuantLib::Null&lt;QuantLib::Real&gt;()'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>VaR level.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

  </Functions>

</Category>